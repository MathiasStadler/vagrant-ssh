# -*- mode: ruby -*-
# vi: set ft=ruby :

VM_NAME = "vagrant-ssh-own-keys-without-insecure-keys"
VAGRANT_BOX_NAME = "debian/stretch64"

VIRTUALBOX_MEMORY = "4096"
VIRTUALBOX_CPU = "4"


ENV["LC_ALL"] = "en_US.UTF-8"
VAGRANT_VERSION = "2.0.1"
VAGRANTFILE_API_VERSION = "2"

# A set of Vagrant version requirements can be specified in the Vagrantfile 
# to enforce that people use a specific version of Vagrant with a Vagrantfile. 
# This can help with compatibility issues that may otherwise arise from using 
# a too old or too new Vagrant version with a Vagrantfile.
Vagrant.require_version ">= #{VAGRANT_VERSION}"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.
  
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    config.vm.box = VAGRANT_BOX_NAME
  
    # ####
    # from here
    # https://www.vagrantup.com/docs/vagrantfile/ssh_settings.html
    
    # This sets the username that Vagrant will SSH as by default. 
    # Providers are free to override this if they detect a more appropriate user. By default this is "vagrant",
    # since that is what most public boxes are made as.
    #config.ssh.username = "vagrant" 

    # This sets a password that Vagrant will use to authenticate the SSH user. Note that Vagrant recommends you
    # use key-based authentication rather than a password (see private_key_path) below. If you use a password, 
    # Vagrant will automatically insert a keypair if insert_key is true.
    #config.ssh.password


    # The hostname or IP to SSH into. By default this is empty, because the provider usually figures 
    # this out for you.
    #config.ssh.host = ""

    # The port to SSH into. By default this is port 22.
    #config.ssh.port = 22 
    
    # The port on the guest that SSH is running on. This is used by some providers to detect forwarded ports for SSH.
    # For example, if this is set to 22 (the default), and Vagrant detects a forwarded port to port 22 on the guest 
    # from port 4567 on the host, Vagrant will attempt to use port 4567 to talk to the guest if there is no other 
    # option.
    #config.ssh.guest_port = 22 
    
    # The path to the private key to use to SSH into the guest machine. By default this is the insecure private key
    # that ships with Vagrant, since that is what public boxes use. If you make your own custom box with a custom 
    # SSH key, this should point to that private key.
    # config.ssh.private_key_path 
    

    # You can also specify multiple private keys by setting this to be an array. This is useful, for example, if you
    # use the default private key to bootstrap the machine, but replace it with perhaps a more secure key later.
    
    # Only use Vagrant-provided SSH private keys (do not use any keys stored in ssh-agent). The default value is 
    # true.
    #config.ssh.keys_only =  true

    # Perform strict host-key verification. The default value is false.
    config.ssh.paranoid = true
    
    # If true, agent forwarding over SSH connections is enabled. Defaults to false.
    #config.ssh.forward_agent = true

    # If true, X11 forwarding over SSH connections is enabled. Defaults to false.
    #config.ssh.forward_x11 = false
    

    # An array of host environment variables to forward to the guest. If you are familiar with OpenSSH, this 
    # corresponds to the SendEnv parameter.
    # config.ssh.forward_env = ["CUSTOM_VAR"]
    
    # HINT! forward terminal type for better compatibility with Dialog - disabled on Ubuntu by default
    # config.ssh.forward_env = ["TERM"]
    
   
    # If true, Vagrant will automatically insert a keypair to use for SSH, replacing Vagrant's default insecure 
    # key inside the machine if detected. By default, this is true.
    config.ssh.insert_key = true
      
    
    # This only has an effect if you do not already use private keys for authentication or if you are relying on the default insecure key. If you do not have to care about security in your project and want to keep using the default insecure key, set this to false.
    
    
    # A command-line command to execute that receives the data to send to SSH on stdin. This can be used to proxy 
    # the SSH connection. %h in the command is replaced with the host and %p is replaced with the port.
    #config.ssh.proxy_command
    
    # If true, pty will be used for provisioning. Defaults to false.
    # This setting is an advanced feature that should not be enabled unless absolutely necessary. It breaks some 
    # other features of Vagrant, and is really only exposed for cases where it is absolutely necessary. If you can 
    # find a way to not use a pty, that is recommended instead.
    # When pty is enabled, it is important to note that command output will not be streamed to the UI. Instead, 
    # the output will be delievered in full to the UI once the command has completed.
    #config.ssh.pty = false


    # If true, this setting SSH will send keep-alive packets every 5 seconds by default to keep connections alive.
    #config.ssh.keep_alive = true
    
    # The shell to use when executing SSH commands from Vagrant. By default this is bash -l. 
    # Note that this has no effect on the shell you get when you run vagrant ssh. This configuration option only 
    # affects the shell to use when executing commands internally in Vagrant.
    #config.ssh.shell = "bash -l"
    
    # The template used to generate exported environment variables in the active session. This can be useful when 
    # using a Bourne incompatible shell like C shell. The template supports two variables which are replaced with 
    # the desired environment variable key and environment variable value: %ENV_KEY% and %ENV_VALUE%. 
    # The default template is:
    #config.ssh.export_command_template = 'export %ENV_KEY%="%ENV_VALUE%"'
    
    # The command to use when executing a command with sudo. This defaults to sudo -E -H %c. The %c will be replaced 
    # by the command that is being executed.
    #config.ssh.sudo_command = "sudo -E -H %c" 
        
    # If false, this setting will not include the compression setting when ssh'ing into a machine. If this is not 
    # set, it will default to true and Compression=yes will be enabled with ssh.
    #config.ssh.compression = true

    # If false, this setting will not include DSAAuthentication when ssh'ing into a machine. If this is not set, 
    # it will default to true and DSAAuthentication=yes will be used with ssh.
    #config.ssh.dsa_authentication = true

    # This settings value is passed directly into the ssh executable. This allows you to pass any arbitrary commands
    # to do things such as reverse tunneling down into the ssh program. These options can either be single flags set 
    # as strings such as "-6" for IPV6 or an array of arguments such as ["-L", "8008:localhost:80"] for enabling a 
    # tunnel from host port 8008 to port 80 on guest.
    # config.ssh.extra_args  

    ##### ssh option end


    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"
  
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
  
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
  
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider "virtualbox" do |vb|
    
        # name of virtualbox vm
        vb.name= VM_NAME
    
    
        # Display the VirtualBox GUI when booting the machine
        vb.gui = false
    
        # Customize the amount of memory on the VM:
        vb.memory = VIRTUALBOX_MEMORY
        
        # Customize the the count of cpu on the VM:
        vb.cpus = VIRTUALBOX_CPU
    
    
        end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
  
    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end
  
    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

    # Documentation
    # https://www.vagrantup.com/docs/provisioning/shell.html
    config.vm.provision :shell, privileged: false do |shell_action|
        ssh_public_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
        shell_action.inline = <<-SHELL
          echo #{ssh_public_key} >> /home/$USER/.ssh/authorized_keys
        SHELL
      end

  end
  